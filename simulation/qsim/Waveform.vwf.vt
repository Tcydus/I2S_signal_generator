// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2020 22:17:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DAC_Input
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DAC_Input_vlg_sample_tst(
	CLK,
	RST_BTN,
	sampler_tx
);
input  CLK;
input  RST_BTN;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or RST_BTN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DAC_Input_vlg_check_tst (
	BCK,
	DIN,
	DMP,
	FLT,
	FMT,
	LCK,
	SCL,
	XMT,
	sampler_rx
);
input  BCK;
input  DIN;
input  DMP;
input  FLT;
input  FMT;
input  LCK;
input  SCL;
input  XMT;
input sampler_rx;

reg  BCK_expected;
reg  DIN_expected;
reg  DMP_expected;
reg  FLT_expected;
reg  FMT_expected;
reg  LCK_expected;
reg  SCL_expected;
reg  XMT_expected;

reg  BCK_prev;
reg  DIN_prev;
reg  DMP_prev;
reg  FLT_prev;
reg  FMT_prev;
reg  LCK_prev;
reg  SCL_prev;
reg  XMT_prev;

reg  BCK_expected_prev;
reg  DIN_expected_prev;
reg  DMP_expected_prev;
reg  FLT_expected_prev;
reg  FMT_expected_prev;
reg  LCK_expected_prev;
reg  SCL_expected_prev;
reg  XMT_expected_prev;

reg  last_BCK_exp;
reg  last_DIN_exp;
reg  last_DMP_exp;
reg  last_FLT_exp;
reg  last_FMT_exp;
reg  last_LCK_exp;
reg  last_SCL_exp;
reg  last_XMT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	BCK_prev = BCK;
	DIN_prev = DIN;
	DMP_prev = DMP;
	FLT_prev = FLT;
	FMT_prev = FMT;
	LCK_prev = LCK;
	SCL_prev = SCL;
	XMT_prev = XMT;
end

// update expected /o prevs

always @(trigger)
begin
	BCK_expected_prev = BCK_expected;
	DIN_expected_prev = DIN_expected;
	DMP_expected_prev = DMP_expected;
	FLT_expected_prev = FLT_expected;
	FMT_expected_prev = FMT_expected;
	LCK_expected_prev = LCK_expected;
	SCL_expected_prev = SCL_expected;
	XMT_expected_prev = XMT_expected;
end



// expected BCK
initial
begin
	BCK_expected = 1'bX;
	BCK_expected = #999000 1'b0;
end 

// expected DIN
initial
begin
	DIN_expected = 1'bX;
	DIN_expected = #999000 1'b0;
end 

// expected DMP
initial
begin
	DMP_expected = 1'bX;
	DMP_expected = #999000 1'b0;
end 

// expected FLT
initial
begin
	FLT_expected = 1'bX;
	FLT_expected = #999000 1'b0;
end 

// expected FMT
initial
begin
	FMT_expected = 1'bX;
	FMT_expected = #999000 1'b0;
end 

// expected LCK
initial
begin
	LCK_expected = 1'bX;
	LCK_expected = #999000 1'b0;
end 

// expected SCL
initial
begin
	SCL_expected = 1'bX;
	SCL_expected = #999000 1'b0;
end 

// expected XMT
initial
begin
	XMT_expected = 1'bX;
	XMT_expected = #999000 1'b0;
end 
// generate trigger
always @(BCK_expected or BCK or DIN_expected or DIN or DMP_expected or DMP or FLT_expected or FLT or FMT_expected or FMT or LCK_expected or LCK or SCL_expected or SCL or XMT_expected or XMT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected BCK = %b | expected DIN = %b | expected DMP = %b | expected FLT = %b | expected FMT = %b | expected LCK = %b | expected SCL = %b | expected XMT = %b | ",BCK_expected_prev,DIN_expected_prev,DMP_expected_prev,FLT_expected_prev,FMT_expected_prev,LCK_expected_prev,SCL_expected_prev,XMT_expected_prev);
	$display("| real BCK = %b | real DIN = %b | real DMP = %b | real FLT = %b | real FMT = %b | real LCK = %b | real SCL = %b | real XMT = %b | ",BCK_prev,DIN_prev,DMP_prev,FLT_prev,FMT_prev,LCK_prev,SCL_prev,XMT_prev);
`endif
	if (
		( BCK_expected_prev !== 1'bx ) && ( BCK_prev !== BCK_expected_prev )
		&& ((BCK_expected_prev !== last_BCK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BCK_expected_prev);
		$display ("     Real value = %b", BCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_BCK_exp = BCK_expected_prev;
	end
	if (
		( DIN_expected_prev !== 1'bx ) && ( DIN_prev !== DIN_expected_prev )
		&& ((DIN_expected_prev !== last_DIN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIN_expected_prev);
		$display ("     Real value = %b", DIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIN_exp = DIN_expected_prev;
	end
	if (
		( DMP_expected_prev !== 1'bx ) && ( DMP_prev !== DMP_expected_prev )
		&& ((DMP_expected_prev !== last_DMP_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DMP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DMP_expected_prev);
		$display ("     Real value = %b", DMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DMP_exp = DMP_expected_prev;
	end
	if (
		( FLT_expected_prev !== 1'bx ) && ( FLT_prev !== FLT_expected_prev )
		&& ((FLT_expected_prev !== last_FLT_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FLT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FLT_expected_prev);
		$display ("     Real value = %b", FLT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_FLT_exp = FLT_expected_prev;
	end
	if (
		( FMT_expected_prev !== 1'bx ) && ( FMT_prev !== FMT_expected_prev )
		&& ((FMT_expected_prev !== last_FMT_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FMT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FMT_expected_prev);
		$display ("     Real value = %b", FMT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_FMT_exp = FMT_expected_prev;
	end
	if (
		( LCK_expected_prev !== 1'bx ) && ( LCK_prev !== LCK_expected_prev )
		&& ((LCK_expected_prev !== last_LCK_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LCK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LCK_expected_prev);
		$display ("     Real value = %b", LCK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LCK_exp = LCK_expected_prev;
	end
	if (
		( SCL_expected_prev !== 1'bx ) && ( SCL_prev !== SCL_expected_prev )
		&& ((SCL_expected_prev !== last_SCL_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SCL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SCL_expected_prev);
		$display ("     Real value = %b", SCL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SCL_exp = SCL_expected_prev;
	end
	if (
		( XMT_expected_prev !== 1'bx ) && ( XMT_prev !== XMT_expected_prev )
		&& ((XMT_expected_prev !== last_XMT_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port XMT :: @time = %t",  $realtime);
		$display ("     Expected value = %b", XMT_expected_prev);
		$display ("     Real value = %b", XMT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_XMT_exp = XMT_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DAC_Input_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST_BTN;
// wires                                               
wire BCK;
wire DIN;
wire DMP;
wire FLT;
wire FMT;
wire LCK;
wire SCL;
wire XMT;

wire sampler;                             

// assign statements (if any)                          
DAC_Input i1 (
// port map - connection between master ports and signals/registers   
	.BCK(BCK),
	.CLK(CLK),
	.DIN(DIN),
	.DMP(DMP),
	.FLT(FLT),
	.FMT(FMT),
	.LCK(LCK),
	.RST_BTN(RST_BTN),
	.SCL(SCL),
	.XMT(XMT)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// RST_BTN
initial
begin
	RST_BTN = 1'b1;
end 

DAC_Input_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.RST_BTN(RST_BTN),
	.sampler_tx(sampler)
);

DAC_Input_vlg_check_tst tb_out(
	.BCK(BCK),
	.DIN(DIN),
	.DMP(DMP),
	.FLT(FLT),
	.FMT(FMT),
	.LCK(LCK),
	.SCL(SCL),
	.XMT(XMT),
	.sampler_rx(sampler)
);
endmodule

